; This program repertoriates all instructions of the language

: func_print_x2
	push 2
	mul
	
	print $sp, "\n"
	
	pop
	
	jump $$

: .start
	
	print "[Stack manipulation]\n"
	
	push 1, 2, 3
	; [1, 2, 3]
	print "Should print 3: ", $sp, "\n"
	
	pop
	; [1, 2]
	print "Should print 2: ", $sp, "\n"

	swap
	; [2, 1]
	print "Should print 1: ", $sp, "\n"
	
	push 3
	swap 2
	; [3, 1, 2]
	print "Should print 2: ", $sp, "\n"
	
	print "\n[Arithmetic]\n"

	add
	add
	; [6]
	print "Should print 6: ", $sp, "\n"

	sub $sp, 2
	; [6, 4]
	print "Should print 4: ", $sp, "\n"
	
	mul
	; [24]
	print "Should print 24: ", $sp, "\n"

	div 16, 3
	; [24, 5]
	print "Should print 5: ", $sp, "\n"
	
	swap ; Arguments are popped from the stack in order, without swapping this would be 5 % 24
	mod
	; [4]
	print "Should print 4: ", $sp, "\n"
	
	print "\n[Bitwise]\n"

	push 0x1F, 0X32
	and
	; [4, 18]
	print "Should print 18: ", $sp, "\n"
	
	or
	; [22]
	print "Should print 22: ", $sp, "\n"
	
	xor 0, 0
	xor 1, 0
	xor 0, 1
	xor 1, 1
	; [22, 0, 1, 1, 0]

	print "Should print 0110: ", $sp
	pop
	print $sp
	pop
	print $sp
	pop
	print $sp, "\n"
	pop
	; [22]
	
	not
	; [-23] 64 bit signed integer
	print "Should print -23: ", $sp, "\n"
	
	lshift 2
	; [-92]
	print "Should print -92: ", $sp, "\n"
	
	rshift 3
	; [-12]
	print "Should print -12: ", $sp, "\n"
	
	print "\n[mov]\n"

	mov reg, 5    ; reg: 5
	mov eax, $reg ; reg: 5, eax: 5
	print "Should print 5 twice: ", $reg, " ", $eax, "\n"
	
	mov reg, eax  ; reg: ptr to eax
	mov $reg, 20
	print "Should print 20: ", $eax, "\n"
	
	print "\n[Runtime]\n"

	print "Should print numbers 1 to 5: "
	mov eax, 0
	: loop
		add $eax, 1
		pop eax

		print $eax, " "
		
		ifeq lt, $eax, 5
		jump loop
	print "\n"

	push 0xFF
	print "Should print 510: "
	call func_print_x2
	
	mov reg, 0
	print "\n[Other]\n"
	print "Should print a number: ", 5, "\na pointer: ", reg, "\na number: ", $reg, "\nEscape sequences: ", "\t\"Some\\ string\"\n\n"

	print "Syscall should print 'A':\n"

	mov reg, 65 ; Ascii value of 'A'
	push 1, reg, 1
	syscall 3, 1

	print "\n\n"

	ifeq eq, 1, 2
	nop

	print "This should print.\n"


	mov reg, -2
	print "\nExit code should be 254.\n"
	jump $$
